<?php
/**
 * Info template
 *
 * @category SMSAPI
 * @package  Smsapi|SMSAPI
 * @author   PaweÅ‚ Detka <pawel.detka@monogo.pl>
 */
?>
<?php
/**
 * @var $block \Smsapi\Smsapi2\Block\Adminhtml\System\Config\Template\Info
 */
?>
<style>
    .accordion .config .label {
        width: 15% !important;
    }

    .accordion .config .value {
        width: 85% !important;
    }
</style>
<div class="smsapi_message_infobox">
    <?= __('In each template you can use dynamic variables.') ?>
    <br/>
    <?= __('Possible values:') ?>
    <ul>
        <li>{NAME} - <?= __('Customer name') ?></li>
        <li>{LASTNAME} - <?= __('Customer last name') ?></li>
        <li>{EMAIL} - <?= __('Customer email') ?></li>
        <li>{ORDERVALUEGROSS} - <?= __('Gross order value') ?></li>
        <li>{ORDERVALUENET} - <?= __('Net order value') ?></li>
        <li>{ORDERSTATUS} - <?= __('Order status') ?></li>
        <li>{ORDERNUMBER} - <?= __('Order number') ?></li>
        <li>{SHIPPINGADDRESS} - <?= __('Shipping address') ?></li>
        <li>{TRACKINGNUMBER} - <?= __('Tracking number (if exists)') ?></li>
        <li>{STORENAME} - <?= __('Store name') ?></li>
    </ul>

    <br/><b><?= __('Example:') ?></b> <?= __('Your order #{ORDERNUMBER} waits for a fee. Regards {STORENAME}') ?>
    <br/><b><?= __('SMS Content:') ?></b> <?= __('Your order #10023422 waits for a fee. Regards SMSAPI') ?>
</div>


<script>
    require(['jquery'], function ($) {

        $(document).on('keyup mouseover', '.message-input', function () {
            showCount($(this));
        });

        function showCount(field) {
            let textValue = $(field).val();
            let id = $(field).attr('id');
            let aboutText = '';
            if (textValue.indexOf("{") >= 0 && textValue.indexOf("}") >= 0) {
                aboutText = ' <?= __('(used variables) about') ?> ';
            }
            $('.' + id).text(aboutText + textValue.length).parent().show();
        }

        $(document).on('click', '#smsapi_templates_messages', function () {
            var results = [];
            var dups = [];
            let rows = $(this).children().find('tr');
            jQuery.each(rows, (rowindex, rowitem) => {
                $(rowitem).css({'border': ''})
                let row_selects = $(rowitem).children().find('select');
                if ($(rowitem).attr('id') !== "undefined") {
                    results.push([$(rowitem).attr('id')])
                }
                jQuery.each(row_selects, (index, item) => {
                    let select_id = $(item).attr('id');
                    if(select_id.includes('col_4')){
                        var textareaId = select_id.replace("col_4","col_5");
                        if ($(item) && $(item).val() == 0) {
                            $(`#${textareaId}`).prop("required", false);
                        } else {
                            $(`#${textareaId}`).prop("required", true);
                        }
                    }

                    if(select_id.includes('col_7')){
                        var textareaId = select_id.replace("col_7","col_3");
                        if ($(item) && $(item).val() == 0) {
                            $(`#${textareaId}`).prop("required", false);
                        } else {
                            $(`#${textareaId}`).prop("required", true);
                        }
                    }

                    if (select_id.includes('col_1') || select_id.includes('col_6')) {
                        results[rowindex].push($(item).val());
                    }
                });
            });

            var rowsArray = getRowsArray(results);

            rowsArray.forEach(function (item) {
                var obj_value = Object.values(item);
                if (!(dups.includes(obj_value))) {
                    dups.push(obj_value);
                }
            });
            getDuplicatesIDs(rowsArray, findDuplicatesInArray(dups));
            isDuplitactes = findDuplicatesInArray(dups);

            if (isDuplitactes.length !== 0) {
                $("#save").attr("disabled", true);
            } else {
                $("#save").attr("disabled", false);

            }
        });


        function getDuplicatesIDs(rowsarray, duplicate) {

            rowsarray.forEach(function (item) {
                let item_entry = Object.entries(item)
                if (item_entry[0][1] == duplicate[0]) {
                    trchilds = $(`#${item_entry[0][0]}`).css({'border': '2px solid red'});
                }

            });
        }

        function getRowsArray(array) {
            var stash = [];
            var objs = {};
            array.forEach(function (item) {
                var rowid = item[0];
                let rowtext = item[1] + "_" + item[2];
                if (rowtext !== "undefined_undefined") {
                    stash.push({[rowid]: rowtext})
                    objs.rowid = rowtext
                }
            });

            return stash;
        }

        function findDuplicatesInArray(arra1) {
            const object = {};
            const result = [];

            arra1.forEach(item => {
                if (!object[item])
                    object[item] = 0;
                object[item] += 1;
            })

            for (const prop in object) {
                if (object[prop] >= 2) {
                    result.push(prop);
                }
            }

            return result;
        }
    });
</script>
